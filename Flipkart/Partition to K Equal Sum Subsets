class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum = 0;
        for(int element : nums){
            sum += element;
        }
        if(sum % k != 0)
            return false;
        if(nums.length < k)
            return false;
        int subset_sum = sum / k;
        boolean[] vis = new boolean[nums.length];
        return canPartition(nums, vis, 0 , k, 0 , subset_sum);
    }
    private boolean canPartition(int[] nums, boolean[] vis, int start, int k, int currsum, int subset_sum){
        if(k == 0)
            return true;
        if(currsum > subset_sum)
            return false;
        if(currsum == subset_sum){
            return canPartition(nums, vis, 0, k-1, 0, subset_sum);
        }
        for(int i=start;i<nums.length;i++){
            if(vis[i])
                continue;
            vis[i] = true;
            if(canPartition(nums, vis, i+1, k , currsum+nums[i], subset_sum))
                return true;
            vis[i] = false;
        }
        return false;
    }
}
